module st where

------------------
prog infixl 6 ++
prog infixr 10 $

($) :: forall a b . (a -> b) -> a -> b
($) f a = f a

data Char :: * where
data List :: * -> * where
 Nil :: forall a . List a 
 Cons :: forall a . a -> List a -> List a

(++) :: forall a . List a -> List a -> List a
(++) Nil l2 = l2
(++) (Cons a as) l2 = Cons a (as ++ l2)

foldr :: forall a b . (a -> b -> b) -> b -> List a -> b
foldr f b Nil = b
foldr f b (Cons a as) = f a (foldr f b as) 

map :: forall a b . (a -> b) -> List a -> List b
map f Nil = Nil
map f (Cons x xs) = Cons (f x) (map f xs)

data Bool :: * where
  True :: Bool
  False :: Bool
type infixl 7 ,
prog infixl 7 ,
data Pair :: * -> * -> * where
  Pair :: forall a b . a -> b -> Pair a b

type (,) ::  * -> * -> * = \ a b . Pair a b

(,) :: forall a b . a -> b -> (a, b)
(,) a b = Pair a b

----------------------------
-- The following programs are from John Launchbury and Simon Peyton Jones'
-- Lazy Functional State Threads

data ST :: * -> * -> * where
data ReadWorld :: * where
data MutVar :: * -> * -> * where
data Unit :: * where
  Unit :: Unit

primitive newVar :: forall a s . a -> ST s (MutVar s a)
primitive readVar :: forall a s . MutVar s a -> ST s a
primitive writeVar :: forall a s . MutVar s a -> a -> ST s Unit
primitive thenST :: forall a b s . ST s a -> (a -> ST s b) -> ST s b
primitive thenST_ :: forall b s . ST s Unit -> ST s b -> ST s b

swap :: forall a s . MutVar s a -> MutVar s a -> ST s Unit
swap v w = readVar v `thenST` \ a ->
           readVar w `thenST` \ b ->
	   writeVar v b `thenST` \ c ->
	   writeVar w a

primitive runST' :: forall a s . ST s a -> a

test1 :: Bool
test1 = let v = runST' $ newVar True in runST' $ readVar v

primitive runST :: forall a . (forall s . ST s a) -> a
primitive returnST :: forall a s . a -> ST s a

-- Note that the following code will not pass the type
-- checker due to the reason that explained in the ST paper
-- test2 :: Bool
-- test2 = let v = runST (newVar True) in runST (readVar v)

f :: forall a s . MutVar s a -> MutVar s a
f v = runST $ newVar v `thenST` \ w -> readVar w

-- index
data Ind :: * where
data MutArr :: * -> * -> * -> * where
data Array :: * -> * -> * where

primitive newArr :: forall elt s . (Ind, Ind) -> elt -> ST s (MutArr s Ind elt)
primitive readArr :: forall elt s . MutArr s Ind elt -> Ind -> ST s elt
primitive writeArr :: forall elt s . MutArr s Ind elt -> Ind -> elt -> ST s Unit
primitive freezeArr :: forall elt s . MutArr s Ind elt -> ST s (Array Ind elt)

accumArray :: forall a b . (Ind, Ind) -> (a -> b -> a) -> a -> List (Ind, b) -> Array Ind a
accumArray bnds f z ivs =
   runST $ newArr bnds z `thenST` \ a ->
             fill a f ivs `thenST_` freezeArr a

fill :: forall a b s . MutArr s Ind a -> (a -> b -> a) -> List (Ind, b) -> ST s Unit
fill a f Nil = returnST Unit
fill a f (Cons (Pair i v) ivs) = readArr a i `thenST` \ x ->
                                 writeArr a i (f x v) `thenST_` fill a f ivs

seqST :: forall s . List (ST s Unit) -> ST s Unit
seqST = foldr thenST_ (returnST Unit)

accumArray' :: forall a b . (Ind, Ind) -> (a -> b -> a) -> a -> List (Ind, b) -> Array Ind a
accumArray' bnds f z ivs =
   runST $ newArr bnds z `thenST` \ a ->
            seqST (map (update a f) ivs) `thenST_` freezeArr a

update :: forall a b s . MutArr s Ind a -> (a -> b -> a) -> (Ind, b) -> ST s Unit
update a f (Pair i v) = readArr a i `thenST` \ x -> writeArr a i (f x v)



--- 

type IO :: * -> * = \ a . ST ReadWorld a

primitive putChar :: Char -> IO Unit
primitive getChar :: IO Char

putString :: List Char -> IO Unit
putString Nil = returnST Unit
putString (Cons c cs) = putChar c `thenST_` putString cs

