module nested where




data Pair :: * -> * where
  Pair :: forall a . a -> a -> Pair a

data Nested :: * -> * where
  N :: forall a . Nested a
  C :: forall a . a -> Nested (Pair a) -> Nested a


square :: forall a b . (a -> b) -> Pair a -> Pair b
square f (Pair x y) = Pair (f x) (f y)

foldP :: forall a b . (a -> a -> b) -> Pair a -> b
foldP f (Pair x y) = f x y

map :: forall a b . (a -> b) -> Nested a -> Nested b
map f N = N
map f (C a as) = C (f a) (map (square f) as)


-- fold :: forall  b f . (forall b . f b) -> (forall b . b -> f (Pair b) -> f b) -> Nested b -> f b
-- fold :: forall a b f . f b -> (forall b . a -> f (Pair b) -> f b) -> Nested a -> f b

-- fold :: forall a b . b -> (forall c . a -> c -> c) -> Nested a -> b
-- fold e f N = e
-- fold e f (C a as) = f a (fold e f (map (foldP f) as))

fold :: forall a b . b -> (forall f . f (Pair a) -> b -> b) -> Nested (Pair a) -> b
fold e f N = e
fold e f (C a as) = f a (fold e f as)

