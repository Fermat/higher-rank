module misc where
------------------
prog infixl 6 ++
data Char :: * where

data Nat :: * where
  Zero :: Nat
  Succ :: Nat -> Nat

data List :: * -> * where
 Nil :: forall a . List a 
 Cons :: forall a . a -> List a -> List a

(++) :: forall a . List a -> List a -> List a
(++) Nil l2 = l2
(++) (Cons a as) l2 = Cons a (as ++ l2)

foldr :: forall a b . (a -> b -> b) -> b -> List a -> b
foldr f b Nil = b
foldr f b (Cons a as) = f a (foldr f b as) 

map :: forall a b . (a -> b) -> List a -> List b
map f Nil = Nil
map f (Cons x xs) = Cons (f x) (map f xs)

data Bool :: * where
  True :: Bool
  False :: Bool
type infixl 7 ,
prog infixl 7 ,

data Pair :: * -> * -> * where
  Pair :: forall a b . a -> b -> Pair a b

type (,) ::  * -> * -> * = \ a b . Pair a b

(,) :: forall a b . a -> b -> (a, b)
(,) a b = Pair a b

primitive undefined :: forall a . a
primitive add :: Nat -> Nat -> Nat
primitive one :: Nat 

--------------

data Maybe :: * -> * where
   Nothing :: forall a . Maybe a
   Just :: forall a . a -> Maybe a

g :: Maybe (forall a . List a -> a) -> (Nat, Bool)
g Nothing = (Zero, False)
g (Just get) = (get (Cons Zero Nil), get (Cons True Nil))


f :: (forall a . a -> a) -> (forall a . a -> a) 
f = \ x -> x x

f' :: (forall a . a) -> (forall a . a)
f' = \ x -> x x

------------------

fix :: forall a . (a -> a) -> a
fix f = f (fix f)  

data Nested :: * -> * where
  NN :: forall a . Nested a
  NCons :: forall a . a -> Nested (List a) -> Nested a

length1 :: forall a . Nested a -> Nat
length1 NN = Zero
length1 (NCons x xs) = add one (length1 xs)

length2 :: forall a . Nested a -> Nat
length2 = fix (\ r n -> case n of
                          NN -> Zero
                          NCons x xs -> add one (r xs))

poly :: (forall v . v -> v) -> Pair Nat Bool
poly f = Pair (f Zero) (f True)

data F :: * -> * where

l :: forall x . F x -> F x
l = undefined

l' :: (forall x . F x) -> (forall x . F x)
l' = undefined 

test1 :: forall y . F y
test1 = fix l

test2 :: forall y . F y
test2 = fix l'

data Bot :: * where 
data Top :: * where

k1 :: forall p . p Bot -> p Top
k1 = undefined

k2 :: forall p . p Top -> p Top
k2 = undefined

a1 :: Bot -> Top
a1 = k1

a2 :: Top -> Top
a2 = k2

k1' :: forall q . (forall y . q -> y) -> Bot
k1' = undefined

k2' :: forall x . x -> x
k2' = undefined

test' :: Bot
test' = k1' k2'
