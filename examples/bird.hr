module Bird where
--------------------- prelude -------------
prog infixl 6 ++ 
prog infixr 9 .
prog infix 7 ==
primitive (==) :: forall a . a -> a -> Bool

data List :: * -> * where
 Nil :: forall a . List a 
 Cons :: forall a . a -> List a -> List a

(++) :: forall a . List a -> List a -> List a
(++) Nil l2 = l2
(++) (Cons a as) l2 = Cons a (as ++ l2)

(.) :: forall p q r . (q -> r) -> (p -> q) -> p -> r
(.) f g x = f (g x)

id :: forall a . a -> a
id x = x

data Bool :: * where
  True :: Bool
  False :: Bool

data Char :: * where
  Lambda :: Char
  Z :: Char
  S :: Char
  X :: Char
  L :: Char
  R :: Char
  Space :: Char

type String :: * = List Char

lParen :: String
lParen = Cons L Nil

rParen :: String
rParen = Cons R Nil

zero :: String
zero = Cons Z Nil

succ :: String
succ = Cons S Nil

space :: String
space = Cons Space Nil

lambda :: String
lambda = Cons Lambda Nil

----------------------

data Pair :: * -> * where
  Pair :: forall a . a -> a -> Pair a

mapP :: forall a b . (a -> b) -> Pair a -> Pair b
mapP f (Pair x y) = Pair (f x) (f y)


data Incr :: * -> * where
  Zero :: forall v . Incr v
  Succ :: forall v . v -> Incr v

data Term :: * -> * where
     Var :: forall v . v -> Term v
     App :: forall v . Pair (Term v) -> Term v
     Lam :: forall v . Term (Incr v) -> Term v

mapI :: forall a b . (a -> b) -> Incr a -> Incr b
mapI f Zero = Zero
mapI f (Succ x) = (Succ . f) x

mapT :: forall a b. (a -> b) -> Term a -> Term b
mapT f (Var x) = (Var . f) x
mapT f (App p) = (App . mapP (mapT f)) p
mapT f (Lam t) = (Lam . mapT (mapI f)) t


foldT :: forall n b . (forall a. a -> n a) ->
                        (forall a. Pair (n a) -> n a) ->
                          (forall a. n (Incr a) -> n a) ->
			    Term b -> n b
foldT v a l (Var x) = v x
foldT v a l (App p) = (a . mapP (foldT v a l)) p
foldT v a l (Lam t) = (l . foldT v a l) t


  
gfoldT :: forall m n b . (forall a. m a -> n a) ->
                           (forall a. Pair (n a) -> n a) ->
			     (forall a. n (Incr a) -> n a) ->
			       (forall a. Incr (m a) -> m (Incr a)) ->
                                Term (m b) -> n b
gfoldT v a l k (Var x) = v x
gfoldT v a l k (App p) = (a . mapP (gfoldT v a l k)) p
gfoldT v a l k (Lam t) = (l . gfoldT v a l k . mapT k) t

foldT' :: forall n b . (forall a. a -> n a) ->
                        (forall a. Pair (n a) -> n a) ->
                          (forall a. n (Incr a) -> n a) ->
			    Term b -> n b
foldT' v a l = gfoldT v a l id



showT :: Term String -> String
showT = gfoldT id showP (\ x -> lambda ++ x) showI

showTC :: Term Char -> String
showTC = showT . mapT (\ x -> Cons x Nil)

showP :: Pair String -> String
showP (Pair a b) = lParen ++ a ++ space ++ b ++ rParen

showI :: Incr String -> String
showI Zero = zero
showI (Succ x) = succ ++ x


joinT :: forall a . Term (Term a) -> Term a
joinT x = (gfoldT id App Lam distT) x 

distT :: forall a . Incr (Term a) -> Term (Incr a)
distT Zero = Var Zero
distT (Succ x) = mapT Succ x


kfoldT :: forall a b . (a -> b) ->
                        (Pair b -> b) ->
			  (b -> b) ->
                           (Incr a -> a) ->
                             Term a -> b
kfoldT v a l k (Var x) = v x
kfoldT v a l k (App p) = (a . mapP (kfoldT v a l k)) p
kfoldT v a l k (Lam t) = (l . kfoldT v a l k . mapT k) t

kfoldT' :: forall a b . (a -> b) ->
                         (Pair b -> b) ->
			  (b -> b) ->
                           (Incr a -> a) ->
                             Term a -> b
kfoldT' v a l k t = gfoldT v a l k t

showT' :: Term String -> String
showT' = kfoldT' id showP (\ x -> lambda ++ x) showI

abstract :: forall a . a -> Term a -> Term a
abstract x = Lam . mapT (match x)

match :: forall a . a -> a -> Incr a
match x y = case x == y of
               True -> Zero
	       False -> Succ y

apply :: forall a . Term a -> Term (Incr a) -> Term a
apply t = joinT . mapT (subst t . mapI Var)

subst :: forall a . a -> Incr a -> a
subst x Zero = x
subst x (Succ y) = y


data TermE :: * -> * where
  VarE :: forall a . a -> TermE a
  AppE :: forall a  . Pair (TermE a) -> TermE a
  LamE :: forall a . (TermE (Incr (TermE a))) -> TermE a

mapE :: forall a b . (a -> b) -> TermE a -> TermE b
mapE f (VarE x) = (VarE . f) x
mapE f (AppE p) = (AppE . mapP (mapE f)) p
mapE f (LamE t) = (LamE . mapE (mapI (mapE f))) t


gfoldE :: forall m n b . (forall a. m a -> n a) ->
                            (forall a. Pair (n a) -> n a) ->
			      (forall a. n (Incr (n a)) -> n a) ->
                                (forall a. Incr a -> m (Incr a)) ->
                                  TermE (m b) -> n b
gfoldE v a l k (VarE x) = v x
gfoldE v a l k (AppE p) = (a . mapP (gfoldE v a l k)) p
gfoldE v a l k (LamE t) = (l . gfoldE v a l k . mapE (k . mapI (gfoldE v a l k))) t


joinE :: forall a . TermE (TermE a) -> TermE a
joinE x = (gfoldE id AppE LamE VarE) x

cvtE :: forall a . TermE a -> Term a
cvtE x = (gfoldE Var App (\ x -> (Lam . joinT . mapT distT) x) id) x

cvtBodyE :: forall a . TermE (Incr (TermE a)) -> Term (Incr a)
cvtBodyE x = (joinT . mapT distT . cvtE . mapE (mapI cvtE)) x

