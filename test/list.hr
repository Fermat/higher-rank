module List where

data List :: * -> * where
 Nil :: forall a . List a 
 Cons :: forall a . a -> List a -> List a

data Bool :: * where
 True :: Bool
 False :: Bool

data Nat :: * where
  Z :: Nat
  S :: Nat -> Nat

data Pair :: * -> * -> * where
  Pair :: forall a b . a -> b -> Pair a b

data Maybe :: * -> * where
  Nothing :: forall a . Maybe a
  Just :: forall a . a -> Maybe a
  
map :: forall a b . (a -> b) -> List a -> List b
map f Nil = Nil
map f (Cons x xs) = Cons (f x) (map f xs)

-- map' :: forall a b . (a -> b) -> List a -> List b
-- map' f l = case l of
--        	   	Nil -> Nil
-- 		Cons x xs -> Cons (f x) (map' f xs)

revapp :: forall a b . a -> (a -> b) -> b
revapp x f = f x

poly :: (forall v . v -> v) -> Pair Nat Bool
poly f = Pair (f Z) (f True)

test :: Pair Nat Bool
test = revapp (\ x -> x) poly

id :: forall x . x -> x
id = \ x -> x

f :: (forall a . List a -> List a) -> Pair (List Bool) (List Nat)
f x = Pair (x (Cons True (Cons False Nil))) (x (Cons Z (Cons (S Z) Nil)))



g :: (forall a . List a -> a) -> Pair Nat Bool
g get = Pair (get (Cons Z Nil)) (get (Cons True Nil))

g' :: Maybe (forall a . List a -> a) -> Pair Nat Bool
g' Nothing = Pair Z False
g' (Just get) = Pair (get (Cons Z Nil)) (get (Cons True Nil))

l :: Nat
l = id id Z

l' :: forall a . a -> a
-- l' x = id id id x
l' = id id id id id id id id id
-- id id id id id id id id id 

reverse :: forall a . List a -> List a
reverse = \ x -> id x

length :: forall a . List a -> Nat
length Nil = Z
length (Cons x xs) = S (length xs)

ids :: List (forall a . a -> a)
ids = Cons id Nil

test2 :: Nat
test2 = length ids

-- foo :: Pair (List Bool) (List Nat)
-- foo = let f = \ x -> Pair (x (Cons True Nil)) (x (Cons Z Nil))
--       in f reverse

id' :: Pair Bool Nat
id' = let x :: forall a . a -> a
          x = \ y -> y
          y = id
          z = id
      in Pair (x True) (x Z)
      
-- id' :: Nat
-- id' = let x = \ y -> y in x Z

-- skk :: forall a b c . (a -> b -> c) -> (a -> b) -> (a -> c)

-- skk :: forall a . (a -> a)
-- skk x = let s :: forall a b c . (a -> b -> c) -> (a -> b) -> (a -> c)
--             s = \ x y z -> x z (y z)
--             k :: forall a b . a -> b -> a
--             k = \ x y -> x
--         in s k k x

s :: forall a b c . (a -> b -> c) -> (a -> b) -> (a -> c)
s = \ x y z -> x z (y z)

k :: forall a b . a -> b -> a
k = \ x y -> x

skk :: forall a . a -> a
skk x = s k k x