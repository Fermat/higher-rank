module fib where
data A :: * -> * where
data Unit :: * where
data Z :: * where
data B :: * -> * where
data S :: * -> * where
data F :: * -> * -> * -> * where
data G :: * -> * -> * where
primitive ka :: forall p x .  p (A (B x)) -> p (A x)
primitive kb :: forall p x . p (A x) -> p (B x)

g :: forall a b x .
      (forall p y . p (a (b y)) -> p (a y)) ->
      (forall p y . p (a y) -> p (b y)) -> a x
       
g a b = a (g (\ v -> a (b v)) a)


h :: A Unit 
h = g ka kb

primitive k ::  forall p x y . p (G (F Z x (S y)) (F x y (S (S Z)))) -> p (F Z (S x) y)

g1 :: forall p qa qb f . (forall p x y . p (qa (f Z x (S y)) x y) -> p (f Z (S x) y)) -> 
                       (forall p y . p (qb (f Z y (S (S Z))) y) -> p (f Z (S Z) y)) ->
                       p (f Z (S Z) (S Z)) 
g1 a1 a2 = a2 (g1 (\ c -> a1 c) (\ c -> a2 (a1 c)))

h1 :: F Z (S Z) (S Z)
h1 = g1 (\ c -> k c) (\ c -> k c) 
