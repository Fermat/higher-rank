module Primitive where
data F :: * -> * where
data Emp :: * where
primitive l :: forall x . F x -> F x
primitive l'' :: (forall x . F x) -> forall x . F x

primitive what :: (forall x . F x) -> Emp

fix :: forall a . (a -> a) -> a
fix f = f (fix f)

l' :: Emp
l' = what (fix l'')
-- l' = let y :: forall x . F x
--          y = fix l
--      in what y


-- u :: forall x . F x -> F x
-- u = u

u :: forall x . F x
u = u 

v :: forall x . F (F x) 
v = u
