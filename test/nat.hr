module Nat where

data List :: * -> * where
 Nil :: forall a . List a 
 Cons :: forall a . a -> List a -> List a                   
                          
add :: Nat -> Nat -> Nat
add Z m = m
add (S n) m = S (add n m)

app :: forall a . List a -> List a -> List a
app l1 l2 = case l1 of
              Nil -> l2
              Cons x xs -> Cons x (app xs l2)

                
--    Cons :: forall a . a -> List a -> List a

id :: forall a . a -> a
id = \ x -> x

data Nat :: * where
  S :: Nat -> Nat 
  Z :: Nat
                  

test1 :: forall a . a
test1 = \ (S n) -> n

test2 :: forall a . a
test2 = let x = add Z Z 
            (S n) = add o p
        in x