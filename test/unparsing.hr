module unparsing where
data Char :: * where
  LL :: Char
  L :: Char
  R :: Char
  Z :: Char
  S :: Char
  X :: Char

data List :: * -> * where
 Nil :: forall a . List a 
 Cons :: forall a . a -> List a -> List a

app :: forall a . List a -> List a -> List a
app Nil l = l
app (Cons x xs) l = Cons x (app xs l)

show :: List Char -> List Char
show = id

newtype Id a = Id a

instance Functor Id where
  fmap f (Id a) = Id (f a)

add :: (Functor f, Functor g) => f String -> g String -> f (g String)
add f g = fmap (\ s -> fmap (\ t -> s ++ t) g) f

lit :: String -> Id String
lit s = Id s

int :: Int -> String
int i = show i

str :: String -> String
str x = x

test1 :: String -> Int -> String
test1 = add str int


