module church where
type Nat :: * = forall x . x -> (x -> x) -> x

zero :: Nat
zero = \ z s -> z

succ :: Nat -> Nat
succ n = \ z s -> s (n z s)

type Pair ::  * -> * -> * = \ a b . forall x . (a -> b -> x) -> x

pair :: forall a b . a -> b -> Pair a b
pair x y = \ f -> f x y

fst :: forall a b . Pair a b -> a
fst = \ p -> p (\ a b -> a)

snd :: forall a b . Pair a b -> b
snd = \ p -> p (\ a b -> b)

pred :: Nat -> Nat
pred n = fst (n (pair zero zero) (\ r -> pair (snd r) (succ (snd r))))

type List :: * -> * =   \ a . forall x . x -> (a -> x -> x) -> x

nil :: forall a . List a
nil = \ n c -> n

cons :: forall a . a -> List a -> List a
cons = \ a as n c -> c a (as n c)

tail :: forall a . List a -> (List a)
tail l =  fst (l (pair nil nil) (\ a r -> pair (snd r) (cons a (snd r))))
-- tail l =  fst (l (pair nil nil) (\ a r -> pair (cons a (snd r)) (cons a (snd r))))
