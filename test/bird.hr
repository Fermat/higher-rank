module Bird where

data List :: * -> * where
 Nil :: forall a . List a 
 Cons :: forall a . a -> List a -> List a

fix :: forall a . (a -> a) -> a
fix f = f (fix f)

data Term :: * -> * where
     Var :: forall a . a -> Term a
     App :: forall a . Term a -> Term a -> Term a
     Lam :: forall a . Term (Incr a) -> Term a

data Incr :: * -> * where
  Zero :: forall a . Incr a
  Succ :: forall a . a -> Incr a

mapI :: forall a b . (a -> b) -> Incr a -> Incr b
mapI f Zero = Zero
mapI f (Succ x) = Succ (f x)

mapT :: forall a b. (a -> b) -> Term a -> Term b
mapT f (Var x) = Var (f x)
mapT f (App t1 t2) = App (mapT f t1) (mapT f t2)
mapT f (Lam t) = Lam (mapT (mapI f) t)

-- fixMT :: forall a b. (forall a1 b1 . (forall a0 b0 . (a0 -> b0) -> Term a0 -> Term b0) -> ((a1 -> b1) -> Term a1 -> Term b1)) -> ((a -> b) -> Term a -> Term b)
-- fixMT f = f (fixMT f)

mapT' :: forall a b. (a -> b) -> Term a -> Term b
mapT' = fix (\ mt -> \ f t ->
      	      	   case t of
		     Var x -> Var (f x)
		     App t1 t2 -> App (mt f t1) (mt f t2)
		     Lam t -> Lam (mt (mapI f) t))



