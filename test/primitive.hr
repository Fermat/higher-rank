module Primitive where

data F :: * -> * where

data G :: * -> * where

data Void :: * where

primitive k :: forall p x . p (G (F (G x))) -> p (F x)

primitive h :: forall p x . p (F x)

-- f :: forall x . F x
-- f = h

-- f :: forall p x . p (F x)
-- f = let h = k h
--     in h

h :: forall p x . p (F x)
h = k h
-- f :: forall x . F x
-- f = let h :: forall p x . p (F x)
--         h = k h
--     in h



