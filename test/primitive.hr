module Primitive where

data F :: * -> * where

data G :: * -> * where

data Void :: * where

data Eq :: * -> * where
data OddList :: * -> * where
data EvenList :: * -> * where
data Int :: * where

primitive k :: forall p x . p (G (F (G x))) -> p (F x)
primitive what :: (forall x . F x) -> Void
-- primitive h :: forall p x . p (F x)

primitive l :: forall x . F x -> F x

fix :: forall a . (a -> a) -> a
fix f = f (fix f)

l' :: Void
l' = let 
         y = fix l
     in what y
   
primitive kEven :: Eq a -> Eq (OddList a) -> Eq (EvenList a)

primitive kOdd :: Eq a -> Eq (EvenList a) ->  Eq (OddList a)

primitive kInt :: Eq Int

h :: Eq (EvenList Int)
h = kEven kInt (kOdd kInt h)
    
half :: (forall x . x) -> forall y . y
half = \ x -> x x

-- f :: forall x . F x
-- f = h

-- f :: forall p x . p (F x)
-- f = let h = k h
--     in h

-- h :: p (F x)
-- h = k h

-- e :: F y
-- e = h

-- f :: forall x . F x
-- f = let h :: forall p x . p (F x)
--         h = k h
--     in h



