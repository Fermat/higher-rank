module List where

data List :: * -> * where
 Nil :: forall a . List a 
 Cons :: forall a . a -> List a -> List a

data Pair :: * -> * -> * where
  Pair :: forall a b . a -> b -> Pair a b

idP :: forall a b . Pair a b -> Pair a b
idP x = let (Pair y1 y2) = x
        in (Pair y1 y2)
	
map :: forall a b . (a -> b) -> List a -> List b
map f Nil = Nil
map f (Cons x xs) = Cons (f x) (map f xs)
map f x = Nil

map' :: forall a b . (a -> b) -> List a -> List b
map' f l = case l of
  	   	Nil -> Nil
        	Cons x xs -> Cons (f x) (map' f xs)
		x -> Nil

app :: forall a . List a -> List a -> List a
app Nil x = x
app (Cons x xs) l = Cons x (app xs l)

skk :: forall a . (a -> a)
skk x = let s :: forall a b c . (a -> b -> c) -> (a -> b) -> (a -> c)
            s = \ x y z -> x z (y z)
            k :: forall a b . a -> b -> a
            k = \ x y -> x
        in s k k x

id :: forall a . (a -> a)
id = let id' = \ x -> x in id'

u :: forall a . (a -> a)
u = u